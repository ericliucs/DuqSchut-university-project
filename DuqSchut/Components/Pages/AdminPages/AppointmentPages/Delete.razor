@page "/admin/appointments/delete"

@inject IDbContextFactory<DuqSchut.Data.DuqSchutContext> DbFactory
@inject NavigationManager NavigationManager
@inject ILogger<Delete> Logger
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Appointment</h2>
    <hr />
    @if (appointment is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">TuteeID</dt>
            <dd class="col-sm-10">@appointment.TuteeID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TutorID</dt>
            <dd class="col-sm-10">@appointment.TutorID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@appointment.Date</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartTime</dt>
            <dd class="col-sm-10">@appointment.StartTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndTime</dt>
            <dd class="col-sm-10">@appointment.EndTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@appointment.Location</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Course</dt>
            <dd class="col-sm-10">@appointment.Course</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Purpose</dt>
            <dd class="col-sm-10">@appointment.Purpose</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TermID</dt>
            <dd class="col-sm-10">@appointment.TermID</dd>
        </dl>
        <EditForm method="post" Model="appointment" OnValidSubmit="DeleteAppointment" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(appointment is null)">Delete</button> |
            <a href="/admin/appointments">Back to List</a>
        </EditForm>
    }
</div>

@code {
    #nullable enable
    private Appointment? appointment;
    #nullable disable

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try{
            using var context = DbFactory.CreateDbContext();
            appointment = await context.Appointments.FindAsync(ID);

            if (appointment is null)
            {
                NavigationManager.NavigateTo("notfound");
            }
        }
        catch (Exception e) {
            Logger.LogError(e, "Unexpected error");
            NavigationManager.NavigateTo("/Error");
        }
        
    }

    private async Task DeleteAppointment()
    {
        try{
            using var context = DbFactory.CreateDbContext();
            context.Appointments.Remove(appointment!);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/admin/appointments", forceLoad:true);
        }
        catch (Exception e) {
            Logger.LogError(e, "Unexpected error");
            NavigationManager.NavigateTo("/Error");
        }
        
    }
}
