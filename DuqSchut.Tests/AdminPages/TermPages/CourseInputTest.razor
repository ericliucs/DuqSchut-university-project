@inherits TestContext
@using DuqSchut.Models
@using DuqSchut.Components.Shared.TermPages

@code {

    /**
     <summary>
      These tests were generated by ChatGPT then edited  and updated by myself, Lucas Mitchell,
      to better test the compoenent and its edge cases.
     </summary>
    */

    /**
    <summary>
     Testing the inital render of the CourseInput component includes a textarea and button.
     NOTE: If the functionality of the test is expanded to include excel files, update this
     test to include that the rendering of the file input component.
    </summary>
    */
    [Fact]
    public void ShouldRenderTextAreaAndButtonWhenNoCourses()
    {
        // Arrange: render the component
        var courseInputComponent = RenderComponent<CourseInput>();
        
        // Act: get the required components
        var textarea = courseInputComponent.Find("textarea");
        var button = courseInputComponent.Find("button");
        
        // Assert: ensure the componenets exist and have correct information
        Assert.NotNull(textarea);
        Assert.NotNull(button);
        Assert.Equal("Add Courses", button.TextContent.Trim());

        // Assert: if the component is initalized with 0 courses, ensure there is no table or rows
        // NOTE: The initalization with courses included will be tested in a later test.
        var table = courseInputComponent.FindAll("table");
        var rows = courseInputComponent.FindAll("tr");
        Assert.Empty(table);
        Assert.Empty(rows);

        // Assert: verify single course input is not present
        var singleInputs = courseInputComponent.FindAll("input");
        Assert.Empty(singleInputs);
        
        // Assert: verify clear courses button is not present
        var clearButton = courseInputComponent.FindAll("button.btn-danger");
        Assert.Empty(clearButton);
    }

    /**
    <summary>
     Testing adding courses to the component through the textarea and submit button.
    </summary>
    */
    [Fact]
    public void ShouldAddCoursesToList()
    {
        // Arrange: render the course input component and find the textarea and submit button
        var courseInputComponent = RenderComponent<CourseInput>();
        var textarea = courseInputComponent.Find("textarea");
        var button = courseInputComponent.Find("button");
 
        // Act: input 3 courses and submit them and add them to the list
        textarea.Change("Course 1\nCourse 2\nCourse 3");
        button.Click();
    
        // Assert: ensure all courses were added to the list
        var courses = courseInputComponent.Instance.Courses;
        Assert.Equal(3, courses.Count);
        Assert.Contains("Course 1", courses);
        Assert.Contains("Course 2", courses);
        Assert.Contains("Course 3", courses);

        // Assert: ensure the component created a new row for each
        var rows = courseInputComponent.FindAll("tr");
        Assert.Equal(3, rows.Count-1); // Subtract 1 to account for the header row

        // Assert: each row has an input component and a delete button
        // I found the QuerySelector method from this Github Issues page:
        // https://github.com/bUnit-dev/bUnit/issues/152
        // This method returns the first element found from the seaching using the input
        for (int i=1; i < rows.Count; i++) // start at 1 to skip the header row
        {
            var row = rows[i];

            // ensure the input component exists and has accurate information
            var inputComponent = row.QuerySelector("input.form-control");
            Assert.NotNull(inputComponent);
            Assert.Equal(courses[i-1], inputComponent.GetAttribute("value"));

            // ensure the delete button exists
            var deleteButton = row.QuerySelector("button.btn-danger");
            Assert.NotNull(deleteButton);
        }
    }

    /**
    <summary>
     Testing removing courses from the list of added courses through the press of the remove button.
    </summary>
    */
    [Fact]
    public void ShouldRemoveCourseFromList()
    {
        // Arrange: render the compoenent
        var courseInputComponent = RenderComponent<CourseInput>();
        var textarea = courseInputComponent.Find("textarea");
        var button = courseInputComponent.Find("button");
        
        // Arrange: Setup the courses by creating 3 dummy courses
        textarea.Change("Course 1\nCourse 2\nCourse 3");
        button.Click();

        // Arrange/Assert: ensure the setup of the courses was successfull
        var startRows = courseInputComponent.FindAll("tr");
        Assert.Equal(3, startRows.Count-1); //subtract 1 to account for the header row

        // Act: click the remove the button to remove the course. NOTE: Becuase there are courses in the list,
        // this will be the second button found as there is a clear all button before it
        var removeButton = courseInputComponent.FindAll("button.btn-danger")[1];
        removeButton.Click();

        // Assert: the course was removed from the list
        var courses = courseInputComponent.Instance.Courses;
        Assert.Equal(2, courses.Count);
        Assert.DoesNotContain("Course 1", courses);

        // Assert: the number of rows udpated
        var endRows = courseInputComponent.FindAll("tr");
        Assert.Equal(2, endRows.Count-1);
    }

    /**
    <summary>
     Testing updating the course name of a course added to the list through the textarea.
    </summary>
    */
    [Fact]
    public void ShouldUpdateCourseInList()
    {
        // Arrange: render the compoenent and seed the number of courses
        var courseInputComponent = RenderComponent<CourseInput>();
        var textarea = courseInputComponent.Find("textarea");
        var button = courseInputComponent.Find("button");
        textarea.Change("Course 1\nCourse 2\nCourse 3");
        button.Click();

        // Act: update a course by changing the value/name
        var courseInput = courseInputComponent.FindAll("input.form-control")[1];
        courseInput.Change("Updated");

        // Assert: verify that the change is reflected in the component
        var updatedInput = courseInputComponent.FindAll("input.form-control")[1];
        Assert.Equal("Updated", updatedInput.GetAttribute("value"));

        // Assert: verify the list of courses was updated appropriately
        var courses = courseInputComponent.Instance.Courses;
        Assert.Contains("Updated", courses);
        Assert.DoesNotContain("Course 2", courses);
    }

    /**
    <summary>
     Testing initalizing the component with courses using the parameter (Simulating the edit page).
    </summary>
    */
    [Fact]
    public void InitializeWithCurrentCoursesShouldPopulateCoursesList()
    {
        // Arrange: seed the component with a list of TermCourses to initalize it to show the courses
        // I got the parameter passsing here: https://bunit.dev/docs/verification/verify-component-state.html#:~:text=To%20get%20the%20instances%20of,the%20IRenderedComponent%20type.
        var currentCourses = new List<TermCourse>
        {
            new TermCourse { Course = "Course 1" },
            new TermCourse { Course = "Course 2" }
        };

        var courseInputComponent = RenderComponent<CourseInput>(
            parameters => parameters.Add(p => p.CurrentCourses, currentCourses)
        );

        // Assert: the list of couress contains each of the passed in couress
        var courses = courseInputComponent.Instance.Courses;
        Assert.Equal(2, courses.Count);
        Assert.Contains("Course 1", courses);
        Assert.Contains("Course 2", courses);

        // Assert: the component successfully rendered a row for each of the inputted componenets
        var rows = courseInputComponent.FindAll("tr");
        Assert.Equal(2, rows.Count-1); // subtract 1 to account for the header row

        // Assert the row has the correct elements and information
        for (int i=1; i < rows.Count; i++) // start at 1 to skip the header row
        {
            var row = rows[i];

            // ensure the input component exists and has accurate information
            var inputComponent = row.QuerySelector("input.form-control");
            Assert.NotNull(inputComponent);
            Assert.Equal(courses[i-1], inputComponent.GetAttribute("value"));

            // ensure the delete button exists
            var deleteButton = row.QuerySelector("button.btn-danger");
            Assert.NotNull(deleteButton);
        }
    }

    /**
    <summary>
     Testing adding a single course through the single input field that appears after courses exist.
    </summary>
    */
    [Fact]
    public void ShouldAddSingleCourseViaInput()
    {
        // Arrange: render the component with initial courses (this is the same code as in)
        // in the InitializeWithCurrentCoursesShouldPopulateCoursesList test.
        var currentCourses = new List<TermCourse>
        {
            new TermCourse { Course = "Course 1" },
            new TermCourse { Course = "Course 2" }
        };

        var courseInputComponent = RenderComponent<CourseInput>(
            parameters => parameters.Add(p => p.CurrentCourses, currentCourses)
        );
        
        // Act: add a single course via the input field
        var inputArea = courseInputComponent.FindAll("textarea")[0];
        var addButton = courseInputComponent.FindAll("button.btn-primary")[0];
        inputArea.Change("New Course (course 3)");
        addButton.Click();
        
        // Assert: ensure the new course was added to the list
        var courses = courseInputComponent.Instance.Courses;
        Assert.Equal(3, courses.Count);
        Assert.Contains("New Course (course 3)", courses);
        
        // Assert: the table reflects the new course
        var rows = courseInputComponent.FindAll("tr");
        Assert.Equal(3, rows.Count - 1); // Subtract 1 for the header row
    }

    /**
    <summary>
     Testing the clear courses button functionality.
    </summary>
    */
    [Fact]
    public void ShouldClearAllCoursesAndRevertToTextarea()
    {
        // Arrange: render the component with initial courses. This is the same code as
        // in the InitializeWithCurrentCoursesShouldPopulateCoursesList test.
        var currentCourses = new List<TermCourse>
        {
            new TermCourse { Course = "Course 1" },
            new TermCourse { Course = "Course 2" }
        };

        var courseInputComponent = RenderComponent<CourseInput>(
            parameters => parameters.Add(p => p.CurrentCourses, currentCourses)
        );
        
        // Act: click the clear courses button
        var clearButton = courseInputComponent.FindAll("button.btn-danger")[0];
        clearButton.Click();
        
        // Assert: all courses are removed
        var courses = courseInputComponent.Instance.Courses;
        Assert.Empty(courses);
        
        // Assert: UI reverts back to textarea
        var textarea = courseInputComponent.Find("textarea");
        Assert.NotNull(textarea);
        
        // Assert: UI reverts back to the add courses button
        var addCoursesButton = courseInputComponent.Find("button.btn-primary");
        Assert.NotNull(addCoursesButton);
        Assert.Equal("Add Courses", addCoursesButton.TextContent.Trim());
    }

    // Edge cases

    /**
     <summary>
      Tests that submitting an empty textarea does not add any courses.
     </summary>
    */
    [Fact]
    public void ShouldNotAddCoursesOnEmptyInput()
    {
        // Arrange: render the complmenet and get the required elements
        var courseInputComponent = RenderComponent<CourseInput>();
        var textarea = courseInputComponent.Find("textarea");
        var button = courseInputComponent.Find("button");

        // Act: submit an empty textarea
        textarea.Change("");
        button.Click();

        // Assert: ensure no courses were added
        var courses = courseInputComponent.Instance.Courses;
        Assert.Empty(courses);

        // Assert: ensure no rows are rendered
        var rows = courseInputComponent.FindAll("tr");
        Assert.Empty(rows);
    }

    /**
     <summary>
      Tests that duplicate courses are not added to the list.
     </summary>
    */
    [Fact]
    public void ShouldNotAddDuplicateCourses()
    {
        // Arrange: render the complmenet and get the required elements
        var courseInputComponent = RenderComponent<CourseInput>();
        var textarea = courseInputComponent.Find("textarea");
        var button = courseInputComponent.Find("button");

        // Act: submit duplicate courses
        textarea.Change("Course 1\nCourse 1\nCourse 1");
        button.Click();

        // Assert: ensure only one instance of the course was added
        var courses = courseInputComponent.Instance.Courses;
        Assert.Single(courses);
        Assert.Contains("Course 1", courses);

        // Assert: ensure only one row is rendered
        var rows = courseInputComponent.FindAll("tr");
        Assert.Equal(1, rows.Count - 1); // Subtract 1 for the header row
    }

}