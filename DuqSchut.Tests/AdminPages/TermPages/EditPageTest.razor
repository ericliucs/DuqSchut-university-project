@using DuqSchut.Data
@using DuqSchut.Components.Pages.AdminPages.TermPages
@using DuqSchut.Models
@inject NavigationManager NavigationManager
@inherits TestContext
@using Microsoft.EntityFrameworkCore
@using Radzen.Blazor

@code {
    /**
    <summary>
        Test that NavPage contains
        @attribute [Authorize(Roles = "Admin")]
    </summary>
    */
    [Fact]
    public void OnlyAdminIsAuthorized() 
    {
        var actual = Attribute.GetCustomAttribute(
            typeof(Edit), 
            typeof(AuthorizeAttribute)) as AuthorizeAttribute;
        Assert.NotNull(actual);
        Assert.Equal("Admin", actual.Roles);
    }
    // Test for the Edit Term page
    // Some of this code was generated by chatGPT and altered and fixed by Isabel Arraes

    [Fact]
    // test to ensure the term is updated in the database when the form is submitted
    public async Task TestIfUpdatedDatabaseAfterSubmittingForm()
    {
        // Arrange: Set up the mock database
        DuqSchut.Tests.DBUtils.CreateDB(this);
        var contextFactory = 
            Services.GetRequiredService<IDbContextFactory<DuqSchutContext>>();
        
        // Create a test term and add it to the database
        var term = new Term
        {
            Name = "Test Term",
            StartDate = new DateOnly(2005, 4, 20),  // my birthday
            EndDate = new DateOnly(2025, 2, 26), // today
            TimeIncrement = TermTimeIncrement.HalfHour,
            Published = false,
            Courses = new List<TermCourse>
            {
                new TermCourse { Course = "Course 1" },
                new TermCourse { Course = "Course 2" }
            }
        };

        using (var context = contextFactory.CreateDbContext())
        {
            context.Terms.Add(term);
            await context.SaveChangesAsync();
        }
        
        // Navigate to the URI for the edit page with the new term ID
        var navManager = Services.GetRequiredService<FakeNavigationManager>();
        var uri = navManager.GetUriWithQueryParameter("ID", term.ID.ToString());
        navManager.NavigateTo(uri);

        // Render component after navigation so that it contains the term info
        var editPage = RenderComponent<Edit>();
    
        // Act: Simulate updating the term
        // Change term fields
        
        editPage.Find("input#name").Change("Updated Test Term");
        editPage.Find("input#published").Change("true");

        // courses are tested on another test page

        /*
        Change() does not work with RadzenDatePicker.
        According to ChatGPT, 

        The issue here likely stems from how the RadzenDatePicker component 
        handles its value updates internally. Unlike standard HTML <input> 
        elements, third-party components like RadzenDatePicker often require 
        additional mechanisms to properly update their bound values in a Blazor 
        test environment.

        ChatGPT recommended a solution like the one implemented below.
        Modifications made by Dr Jackson.
        This also involved modifying TermPages/Edit.razor to bind the RadzenDatePicker
        components to DateTime variables rather than to Term.StartDate and Term.EndDate.
        The variables are copied to the Term properties in Edit's UpdateTerm() method.
        */
        var datePickers = editPage.FindComponents<RadzenDatePicker<DateTime>>();
        var startDatePicker = datePickers[0];
        var endDatePicker = datePickers[1];
        var newStartDate = new DateTime(2025, 1, 1);
        var newEndDate = new DateTime(2025, 5, 10);

        // Invoke the change events on the UI thread
        await editPage.InvokeAsync(() =>
        {
            startDatePicker.Instance.ValueChanged.InvokeAsync(newStartDate);
            endDatePicker.Instance.ValueChanged.InvokeAsync(newEndDate);
        });

        // Find the submit button and click it
        var submitButton = editPage.Find("button[type='submit']");
        await submitButton.ClickAsync(new MouseEventArgs());

        // Assert: Verify that the term was updated in the database
        // Retrieve a new instance of the database context to check the updated term
        Term? updatedTerm;
        using (var newContext = contextFactory.CreateDbContext())
        {
            updatedTerm = await newContext.Terms.FindAsync(term.ID);
        }     
        // Assert that the term has been updated
        Assert.NotNull(updatedTerm);
        Assert.Equal("Updated Test Term", updatedTerm.Name);
        Assert.True(updatedTerm.Published);
        Assert.Equal(DateOnly.FromDateTime(newStartDate), updatedTerm.StartDate);
        Assert.Equal(DateOnly.FromDateTime(newEndDate), updatedTerm.EndDate); 
    }
        
    [Fact]
    // test to ensure the Edit Term page is rendering correctly with pre-existing data
    public async Task  EditPageRenderingWithExistingData()
    {
        // Arrange: Set up the mock database
        DuqSchut.Tests.DBUtils.CreateDB(this);
        var contextFactory = 
            Services.GetRequiredService<IDbContextFactory<DuqSchutContext>>();

        // Create a test term and add it to the database
        var term = new Term
        {
            Name = "Test Term",
            StartDate = new DateOnly(2025, 1, 1),  
            EndDate = new DateOnly(2025, 12, 31),
            TimeIncrement = TermTimeIncrement.Hour, 
            Published = false,
            Courses = new List<TermCourse>
            {
                new TermCourse { Course = "Course 1" },
                new TermCourse { Course = "Course 2" }
            }
        };

        using (var context = contextFactory.CreateDbContext())
        {
            context.Terms.Add(term);
            await context.SaveChangesAsync();
        }

        // Navigate to the URI for the edit page with the new term ID
        var navManager = Services.GetRequiredService<FakeNavigationManager>();
        var uri = navManager.GetUriWithQueryParameter("ID", term.ID.ToString());
        navManager.NavigateTo(uri);

        // Render component after navigation so that it contains the term info
        var editPage = RenderComponent<Edit>();

        // Act: Ensure the page is rendering the correct data in the form fields
        var termNameField = editPage.Find("input#name");
        var startDateField = editPage.Find("input#startdate");
        var endDateField = editPage.Find("input#enddate");
        var timeIncrementField = editPage.Find("input#timeincrement");  
        var publishedField = editPage.Find("input#published");

        // Assert: Check if the term data is correctly displayed
        Assert.Equal("Test Term", termNameField.GetAttribute("value"));
        Assert.Equal(TermTimeIncrement.Hour.ToString(), timeIncrementField.GetAttribute("value"));  
        Assert.Equal("false", publishedField.GetAttribute("value"));
    }

    [Fact]
    // test to ensure the Edit Term page navigates to the term index page when the "Back to List" link is clicked
    public async Task NavigateToCorrectPageFromBackToListLink()
    {
        
        DuqSchut.Tests.DBUtils.CreateDB(this);
        var contextFactory = Services.GetRequiredService<IDbContextFactory<DuqSchutContext>>();
        
        // Create a test term and add it to the database
        var term = new Term
        {
            Name = "Test Term",
            StartDate = new DateOnly(2005, 4, 20),  // my birthday
            EndDate = new DateOnly(2025, 2, 26), // today
            TimeIncrement = TermTimeIncrement.HalfHour,
            Published = false,
            Courses = new List<TermCourse>
            {
                new TermCourse { Course = "Course 1" },
                new TermCourse { Course = "Course 2" }
            }
        };

        using (var context = contextFactory.CreateDbContext()) 
        {
            context.Terms.Add(term);
            await context.SaveChangesAsync();
        }

        // Navigate to the URI for the edit page with the new term ID
        var navManager = Services.GetRequiredService<FakeNavigationManager>();
        var uri = navManager.GetUriWithQueryParameter("ID", term.ID.ToString());
        navManager.NavigateTo(uri);
        
        // Render the Edit page component
        var editPage = RenderComponent<Edit>();

        // Act: Simulate clicking the "Back to List" link
        var backToListLink = editPage.Find("a[href='/admin/terms']");  // Find the anchor tag with the correct href
        await backToListLink.ClickAsync(new MouseEventArgs());  // Simulate clicking the link

        // Assert: Verify that the navigation occurred to the expected URI
        Assert.Equal("http://localhost/admin/terms", navManager.Uri);
    }

    [Fact]
    // test to ensure the Edit Term page navigates to the term index page when the "Save" button is clicked
    public async Task NavigateToCorrectPageFromSaveButton()
    {
        // Arrange: Set up the mock database
        DuqSchut.Tests.DBUtils.CreateDB(this);
        var contextFactory = Services.GetRequiredService<IDbContextFactory<DuqSchutContext>>();
        

        // Create a test term and add it to the database
        var term = new Term
        {
            Name = "Test Term",
            StartDate = new DateOnly(2005, 4, 20),  // my birthday
            EndDate = new DateOnly(2025, 2, 26), // today
            TimeIncrement = TermTimeIncrement.HalfHour,
            Published = false,
            Courses = new List<TermCourse>
            {
                new TermCourse { Course = "Course 1" },
                new TermCourse { Course = "Course 2" }
            }
        };
        
        using (var context = contextFactory.CreateDbContext())
        {
            context.Terms.Add(term);
            await context.SaveChangesAsync();
        }
        
        // Navigate to the URI for the edit page with the new term ID
        var navManager = Services.GetRequiredService<FakeNavigationManager>();
        var uri = navManager.GetUriWithQueryParameter("ID", term.ID.ToString());
        navManager.NavigateTo(uri);

        // Render component after navigation so that it contains the term info
        var editPage = RenderComponent<Edit>();
    
        // Act: Simulate updating the term
        editPage.Find("input#name").Change("Updated Test Term");
        
        // Find the submit button and click it
        var submitButton = editPage.Find("button[type='submit']");
        await submitButton.ClickAsync(new MouseEventArgs());

        // Assert: Verify that the term was updated in the database
        // Retrieve a new instance of the database context to check the updated term
        using (var newContext = contextFactory.CreateDbContext())
        {
            var updatedTerm = newContext.Terms.Find(term.ID);
            Assert.NotNull(updatedTerm);
            Assert.Equal("Updated Test Term", updatedTerm.Name);
        }
        
        // Assert that the save button click navigates to the term index page
        Assert.Equal("http://localhost/admin/terms", navManager.Uri);
    }    

    [Fact]
    public void DisplaysLoadingMessageWhenTermIsNull()
    {
        DuqSchut.Tests.DBUtils.CreateDB(this);
        var contextFactory = Services.GetRequiredService<IDbContextFactory<DuqSchutContext>>();
        
        // Arrange: Render the Edit component without setting Term
        var editPage = RenderComponent<Edit>();

        // Act & Assert: Check if "Loading..." is displayed
        Assert.Contains("Loading...", editPage.Markup);
    }

    [Fact]
    public async Task ShouldAddCourseIfNotExistsInTermCourses()
    {
        DuqSchut.Tests.DBUtils.CreateDB(this);
        var contextFactory = Services.GetRequiredService<IDbContextFactory<DuqSchutContext>>();
        // Arrange: Set up a Term with no courses
        var term = new Term
        {
            Name = "Test Term",
            Courses = new List<TermCourse>()  // No courses initially
        };

        // Set up the mock context

        using (var context = contextFactory.CreateDbContext())
        {
            context.Terms.Add(term);
            await context.SaveChangesAsync();
        }

        // Create a new course to add
        var newCourse = new TermCourse { Course = "Course 1" };

        // Simulate adding the new course if it does not exist in the Term's Courses list
        using (var context = contextFactory.CreateDbContext())
        {
            if (!term.Courses.Any(tc => tc.Course == newCourse.Course))
            {
                newCourse.TermID = term.ID;
                context.TermCourses.Add(newCourse);
                term.Courses.Add(newCourse); // Add to Term's Courses list
            }

            // Save changes to the database
            await context.SaveChangesAsync();
        }

        // Assert: Verify that the new course was added to both Term.Courses and the database
        Term? updatedTerm;
        using (var context = contextFactory.CreateDbContext())
        {   
            updatedTerm = await context.Terms.Include(t => t.Courses).FirstOrDefaultAsync(t => t.Name == "Test Term");
        }

        Assert.NotNull(updatedTerm);
        Assert.Single(updatedTerm.Courses); // Ensure that there is only 1 course added
        Assert.Equal("Course 1", updatedTerm.Courses.First().Course);  // The course name should be "Course 1"

        // Ensure that the course exists in the TermCourses table as well
        using (var verifyContext = contextFactory.CreateDbContext())
        {
            var addedCourse = await verifyContext.TermCourses.FirstOrDefaultAsync(c => c.Course == "Course 1");
            Assert.NotNull(addedCourse); // The course should exist in the TermCourses table
            Assert.Equal(newCourse.TermID, addedCourse?.TermID);  // The TermID should match
        }   
    }
 
	[Fact]
    public async Task ShouldRemoveCourseIfDeletedFromTermCourses()
    {
        // Set up the mock database
        DuqSchut.Tests.DBUtils.CreateDB(this);
        var contextFactory = Services.GetRequiredService<IDbContextFactory<DuqSchutContext>>();

        // Arrange: Set up a Term with a course initially
        var term = new Term
        {
            Name = "Test Term",
            Courses = new List<TermCourse>
            {
                new TermCourse { Course = "Course 1" }  // Initial course
            }
        };

        // Add the term to the database
        using (var context = contextFactory.CreateDbContext())
        {
            context.Terms.Add(term);
            await context.SaveChangesAsync();
        }

        // Simulate removing the course from the TermCourses table
        using (var context = contextFactory.CreateDbContext())
        {
            var courseToRemove = term.Courses.First();
            context.TermCourses.Remove(courseToRemove); // Remove the course from TermCourses table
            term.Courses.Remove(courseToRemove); // Remove the course from Term.Courses list

            // Save changes to the database
            await context.SaveChangesAsync();
        }

        // Assert: Verify that the course was removed from both Term.Courses and the database
        Term? updatedTerm;
        using (var context = contextFactory.CreateDbContext())
        {
            updatedTerm = await context.Terms.Include(t => t.Courses).FirstOrDefaultAsync(t => t.Name == "Test Term");
        }

        Assert.NotNull(updatedTerm);
        Assert.Empty(updatedTerm.Courses); // No courses should exist

        // Ensure that the course was removed from the TermCourses table as well
        using (var context = contextFactory.CreateDbContext())
        {
            var removedCourse = await context.TermCourses.FirstOrDefaultAsync(c => c.Course == "Course 1");
            Assert.Null(removedCourse); // The course should not exist in the TermCourses table
        }
    }   
}