namespace DuqSchut.Tests.Services;

using Xunit;
using Moq;
using DuqSchut.Services;
using DuqSchut.Models;

using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;

using Microsoft.Extensions.Logging;

public class ReportServiceTests
{
    private readonly Mock<ILogger<ReportService>> _mockLogger;
    private readonly ReportService _reportGenerator;
    public ReportServiceTests()
    {
        _mockLogger = new Mock<ILogger<ReportService>>();
        _reportGenerator = new ReportService(_mockLogger.Object);
    }

    
    [Fact]
    public void GenerateBasicReport_CreatesValidFile()
    {
        // Arrange
        var appointments = CreateTestAppointments();
        var sheetName = "TestReport";

        // Act: generate the Excel report as a MemoryStream.
        using var stream = _reportGenerator.GenerateBasicReport(sheetName, appointments);

        // Assert: ensure the stream is not null and has data.
        Assert.NotNull(stream);
        Assert.True(stream.Length > 0);

        // Use OpenXML to inspect the content of the Excel report.
        using (var document = SpreadsheetDocument.Open(stream, false))
        {
                
            var workbookPart = document.WorkbookPart;
            Assert.NotNull(workbookPart);

            var worksheetPart = workbookPart.WorksheetParts.First();
            Assert.NotNull(worksheetPart);

            var sheets = workbookPart.Workbook.Sheets;
            Assert.NotNull(sheets);

            var sheet = sheets.Elements<Sheet>().First();
            Assert.Equal("TestReport", sheet.Name);

            var sheetData = worksheetPart.Worksheet.Elements<SheetData>().First();
            Assert.NotNull(sheetData);

            var rows = sheetData.Elements<Row>().ToList();
            // Should have 7 rows: header + 5 days + totals row.
            Assert.Equal(7, rows.Count);
        }
    }


    // This test was generated by ChatGPT, and modified by myself (Lucas Mitchell)
    [Fact]
    public void GenerateBasicReport_CreatesValidFile_WithCorrectData()
    {
        // Arrange
        var appointments = CreateTestAppointments();
        var sheetName = "TestReport";

        // Expected header row.
       var expectedHeader = new[] { "Day of Week", "9:00 AM", "9:30 AM", "10:00 AM", "11:00 AM", "2:00 PM", "2:30 PM", "3:00 PM", "3:30 PM", "Total" };

        var expectedRows = new List<string[]>
        {
            // Monday
            new [] { "Monday",  "2", "1", "0", "0", "1", "1", "0", "0", "5" },
            // Tuesday
            new [] { "Tuesday", "0", "0", "1", "1", "0", "0", "0", "0", "2" },
            // Wednesday
            new [] { "Wednesday", "0", "0", "0", "0", "0", "0", "0", "0", "0" },
            // Thursday
            new [] { "Thursday", "0", "0", "0", "0", "0", "0", "0", "0", "0" },
            // Friday
            new [] { "Friday", "0", "0", "0", "0", "0", "0", "1", "1", "2" },
        };

        // Expected final totals row.
        var expectedFinalRow = new[] { "Total", "2", "1", "1", "1", "1", "1", "1", "1", "9"  };

        // Act: generate the report.
        using var stream = _reportGenerator.GenerateBasicReport(sheetName, appointments);

        // Assert: load the report into an OpenXML document and verify its contents.
        using (var document = SpreadsheetDocument.Open(stream, false))
        {
            var workbookPart = document.WorkbookPart;
            Assert.NotNull(workbookPart);

            var worksheetPart = workbookPart.WorksheetParts.First();
            Assert.NotNull(worksheetPart);

            var sheets = workbookPart.Workbook.Sheets;
            Assert.NotNull(sheets);

            var sheet = sheets.Elements<Sheet>().First();
            Assert.Equal(sheetName, sheet.Name);

            var sheetData = worksheetPart.Worksheet.Elements<SheetData>().First();
            Assert.NotNull(sheetData);

            var rows = sheetData.Elements<Row>().ToList();
            // There should be 7 rows: header + 5 days + final totals.
            Assert.Equal(7, rows.Count);

            // Verify the header row.
            var headerCells = rows[0].Elements<Cell>().Select(c => c.CellValue?.Text ?? "").ToArray();
            Assert.Equal(expectedHeader, headerCells);

            // Verify each day's row.
            for (int i = 0; i < expectedRows.Count; i++)
            {
                var dataCells = rows[i + 1].Elements<Cell>().Select(c => c.CellValue?.Text ?? "").ToArray();
                Assert.Equal(expectedRows[i], dataCells);
            }

            // Verify the final totals row.
           var finalRowCells = rows.Last().Elements<Cell>().Select(c => c.CellValue?.Text ?? "").ToArray();
            Assert.Equal(expectedFinalRow, finalRowCells);
        }
    }

    // I had ChatGPT had be generate this list of appointments. Note that this function only needs
    // the date and start time so that is all I included.
    private List<Appointment> CreateTestAppointments()
    {
        // Create sample appointments for testing
        var appointments = new List<Appointment>
        {
            new Appointment
            {
                Date = new DateOnly(2023, 10, 9),
                StartTime = new TimeOnly(9, 0),
                EndTime = new TimeOnly(9, 30)
            },
            new Appointment
            {
                Date = new DateOnly(2023, 10, 9),
                StartTime = new TimeOnly(9, 0),
                EndTime = new TimeOnly(10, 0)
            },
            new Appointment
            {
                Date = new DateOnly(2023, 10, 9),
                StartTime = new TimeOnly(14, 0),
                EndTime = new TimeOnly(15, 0)
            },
            new Appointment
            {
                Date = new DateOnly(2023, 10, 10),
                StartTime = new TimeOnly(10, 0),
                EndTime = new TimeOnly(10, 30)
            },
            new Appointment
            {
                Date = new DateOnly(2023, 10, 10),
                StartTime = new TimeOnly(11, 0),
                EndTime = new TimeOnly(11, 30)
            },
            new Appointment
            {
                Date = new DateOnly(2023, 10, 13),
                StartTime = new TimeOnly(15, 0),
                EndTime = new TimeOnly(16, 0)
            }
        };
            
        return appointments;
    }

} 